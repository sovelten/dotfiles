import XMonad
import XMonad.Actions.GridSelect
import XMonad.Actions.SpawnOn
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.FadeInactive
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.SetWMName
import XMonad.Layout.NoBorders
import qualified XMonad.Layout.Tabbed as Tab
import qualified XMonad.Layout.WorkspaceDir as WD
import qualified XMonad.Prompt as P
import qualified XMonad.Util.EZConfig as EZ
import XMonad.Util.Run(spawnPipe)
import System.IO


main = do
    xmproc <- spawnPipe "xmobar /home/sophia/.xmobarrc"
    xmonad $ ewmh . docks $ myConfig
        { manageHook = manageDocks <+> myManageHook
        , terminal = "termite"
        , layoutHook = myLayouts
        , logHook = do
            dynamicLogWithPP xmobarPP
                { ppOutput = hPutStrLn xmproc
                , ppTitle = xmobarColor "green" "" . shorten 50
                }
        , startupHook = myStartupHook
        , modMask = mod1Mask
        }

myStartupHook = do
    --spawn "/home/sophia/.screenlayout/screen.sh"
    spawn "setxkbmap -option '' -layout 'br,us' -option grp:shift_caps_toggle -option caps:swapescape"
    setWMName "LG3D"
    spawnOn "9" "slack"
   
_myKeys =
        [
         ("M-s", sendMessage ToggleStruts)
        --,("M-p", spawnHere "exe=`yeganesh -x` && eval \"exec $exe\"")
        ,("M-S-t", spawn "i3lock -c 000000 -n")
        --,("M-S-h", spawn "systemctl hibernate")
        --,("M-S-p", spawn "systemctl reboot")
        ,("M-S-s", spawn "systemctl suspend")
        ,("<XF86AudioPlay>", spawn "playerctl play-pause")
        ,("<XF86AudioNext>", spawn "playerctl next")
        ,("<XF86AudioPrev>", spawn "playerctl previous")
        ,("<XF86AudioLowerVolume>", spawn "amixer sset Master 5%-")
        ,("<XF86AudioRaiseVolume>", spawn "amixer sset Master 5%+")
        ,("<XF86AudioMute>", spawn "amixer sset Master toggle")
        ,("<XF86MonBrightnessUp>", spawn "light -A 10")
        ,("<XF86MonBrightnessDown>", spawn "light -U 10")
        ]

myConfig = EZ.additionalKeysP def _myKeys

myLayouts = avoidStruts
            $ smartBorders
            $ _homeDir

_tiled = Tall nmaster delta ratio
    where
        nmaster = 1
        ratio = 1/2
        delta = 3/100

_easyLay = _tiled ||| Mirror _tiled ||| Tab.simpleTabbed

_homeDir = WD.workspaceDir "/home/sophia" _easyLay

myManageHook :: ManageHook
myManageHook = composeAll [ isFullscreen --> doFullFloat,
                            className =? "trayer" --> doIgnore,
                            manageSpawn ]
